# -*- coding: utf-8 -*-
"""streamlitapp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CKULQ7nJ9xWPOXRymXDHz8yz_cn5E2KG
"""

# ==========================================
# CarePath AI Foundation - Parkinson's Classifier
# ==========================================
import streamlit as st
from streamlit_audio_recorder import audio_recorder
import parselmouth
import numpy as np
import joblib
import tempfile
import os

st.set_page_config(page_title="CarePath AI: Parkinson's Voice Detector", page_icon="🎤")

st.title("🎤 CarePath AI Foundation: Parkinson's Voice Predictor")
st.markdown("""
#### Free Early Detection of Parkinson's Disease via Voice
This public initiative is proudly provided by the non-profit CarePath AI Foundation.
Detecting Parkinson's early can lead to better care and outcomes. This tool lets you record or upload your voice and get an instant AI-based prediction.
""")

# ---------- Load Model ----------
@st.cache_resource
def load_rf_model():
    with open("rf_model.pkl", "rb") as f:
        model = joblib.load(f)
    return model

model = load_rf_model()

# ---------- Feature Extraction Function ----------
def extract_features(audio_path):
    snd = parselmouth.Sound(audio_path)
    features = {}

    # Pitch features
    pitch = snd.to_pitch()
    freqs = pitch.selected_array['frequency']
    nonzero_freqs = freqs[freqs > 0]
    features['MDVP:Fo(Hz)'] = np.mean(nonzero_freqs) if len(nonzero_freqs) > 0 else np.nan
    features['MDVP:Fhi(Hz)'] = np.max(nonzero_freqs) if len(nonzero_freqs) > 0 else np.nan
    features['MDVP:Flo(Hz)'] = np.min(nonzero_freqs) if len(nonzero_freqs) > 0 else np.nan

    # PointProcess for jitter/shimmer
    try:
        pp = parselmouth.praat.call(snd, "To PointProcess (periodic, cc)", 70, 600)
        features['MDVP:Jitter(%)'] = parselmouth.praat.call([snd, pp], "Get jitter (local)", 0, 0, 0.0001, 0.02, 1.3) * 100
        features['MDVP:Jitter(Abs)'] = parselmouth.praat.call([snd, pp], "Get jitter (local, absolute)", 0, 0, 0.0001, 0.02, 1.3)
        features['MDVP:RAP'] = parselmouth.praat.call([snd, pp], "Get jitter (rap)", 0, 0, 0.0001, 0.02, 1.3)
        features['MDVP:PPQ'] = parselmouth.praat.call([snd, pp], "Get jitter (ppq5)", 0, 0, 0.0001, 0.02, 1.3)
        features['Jitter:DDP'] = parselmouth.praat.call([snd, pp], "Get jitter (ddp)", 0, 0, 0.0001, 0.02, 1.3)
        features['MDVP:Shimmer'] = parselmouth.praat.call([snd, pp], "Get shimmer (local)", 0, 0, 0.0001, 0.02, 1.3, 1.6)
        features['MDVP:Shimmer(dB)'] = parselmouth.praat.call([snd, pp], "Get shimmer (local, dB)", 0, 0, 0.0001, 0.02, 1.3, 1.6)
        features['Shimmer:APQ3'] = parselmouth.praat.call([snd, pp], "Get shimmer (apq3)", 0, 0, 0.0001, 0.02, 1.3, 1.6)
        features['Shimmer:APQ5'] = parselmouth.praat.call([snd, pp], "Get shimmer (apq5)", 0, 0, 0.0001, 0.02, 1.3, 1.6)
        features['MDVP:APQ'] = features['Shimmer:APQ5']
        features['Shimmer:DDA'] = parselmouth.praat.call([snd, pp], "Get shimmer (dda)", 0, 0, 0.0001, 0.02, 1.3, 1.6)
    except Exception as e:
        for k in ['MDVP:Jitter(%)','MDVP:Jitter(Abs)','MDVP:RAP','MDVP:PPQ','Jitter:DDP','MDVP:Shimmer','MDVP:Shimmer(dB)','Shimmer:APQ3','Shimmer:APQ5','MDVP:APQ','Shimmer:DDA']:
            features[k] = np.nan

    # NHR and HNR
    try:
        features['NHR'] = parselmouth.praat.call(snd, "Get noise-to-harmonics ratio", 0, 0)
    except Exception: features['NHR'] = np.nan
    try:
        features['HNR'] = parselmouth.praat.call(snd, "Get harmonics-to-noise ratio", 0, 0)
    except Exception: features['HNR'] = np.nan

    return features

# ---------- Main UI ----------
st.header("🎙️ Record or Upload Your Voice")
audio_bytes = audio_recorder(text="Press record, say 'aaah' for 5+ seconds, then stop.", pause_threshold=1.0, sample_rate=16000)

uploaded_file = st.file_uploader("Or upload a .wav file below", type=["wav"])

if audio_bytes or uploaded_file:
    if audio_bytes:
        st.audio(audio_bytes, format="audio/wav")
        with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp:
            tmp.write(audio_bytes)
            audio_path = tmp.name
    else:
        st.audio(uploaded_file)
        with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as tmp:
            tmp.write(uploaded_file.read())
            audio_path = tmp.name

    # Extract features and predict
    try:
        features = extract_features(audio_path)
        feature_order = ['MDVP:Fo(Hz)', 'MDVP:Fhi(Hz)', 'MDVP:Flo(Hz)',
                         'MDVP:Jitter(%)', 'MDVP:Jitter(Abs)', 'MDVP:RAP', 'MDVP:PPQ', 'Jitter:DDP',
                         'MDVP:Shimmer', 'MDVP:Shimmer(dB)', 'Shimmer:APQ3', 'Shimmer:APQ5', 'MDVP:APQ', 'Shimmer:DDA',
                         'NHR', 'HNR']
        feat_values = np.array([features[f] for f in feature_order]).reshape(1, -1)

        if np.isnan(feat_values).any():
            st.error("Could not extract all necessary features. Try re-recording in a quiet room.")
        else:
            # Predict using RF model, threshold=0.63
            prob = model.predict_proba(feat_values)[0, 1]
            pred = int(prob > 0.63)

            st.markdown(f"### **Probability of Parkinson's Disease: `{prob:.2f}`** (Threshold = 0.63)")
            if pred == 1:
                st.error("**Result: Parkinson's Disease likely detected.**\n\nYour voice shows features commonly seen in Parkinson's Disease. Please consult a neurologist for further evaluation.")
            else:
                st.success("**Result: Likely Healthy.**\n\nYour voice does not show strong evidence of Parkinson's Disease.")

            if abs(prob - 0.63) < 0.05:
                st.info("Your probability is close to the threshold. For borderline results, consider retesting or consulting a physician.")

            st.dataframe({k: [features[k]] for k in feature_order})

    except Exception as e:
        st.error(f"Sorry, couldn't extract features: {str(e)}. Try again with a clear 'aaah' sound.")

    # Clean up temp file
    if os.path.exists(audio_path):
        os.remove(audio_path)
else:
    st.info("No audio recorded or uploaded yet.")

st.markdown("---")
st.caption("CarePath AI Foundation • Not for diagnostic use • Data is not stored.")

# ========== END ==========